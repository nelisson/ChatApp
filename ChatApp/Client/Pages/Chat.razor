@page "/chat/{ChatroomId}"
@implements IAsyncDisposable
@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject IAccessTokenProvider TokenProvider
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IHubConnectionFactory HubConnectionFactory
@using ChatApp.Client.HubConnectionClient;
@using ChatApp.Shared.Model
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Authorization

<PageTitle>Chat</PageTitle>

<h1>Chat</h1>

@if (IsConnected)
{
    <Card>
        <CardHeader>
            <Row>
                <Column ColumnSize="ColumnSize.Is11">
                    <TextEdit @bind-Text="userInput" Placeholder="Type your message" />
                </Column>
                <Column ColumnSize="ColumnSize.Is1">
                    <Button Color="Color.Primary" @onclick="() => Send(userInput)">
                        Send
                    </Button>
                </Column>
            </Row>
        </CardHeader>
        <CardBody>
            <ListGroup>
                @foreach (var message in messages)
                {
                    <ListGroupItem>@((MarkupString)message)</ListGroupItem>
                }
            </ListGroup>
        </CardBody>
    </Card>
}
else
{
    <p>Connecting...</p>
}

@code {
    [Parameter]
    public string? ChatroomId { get; set; }

    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string userInput = "";
    private string username = "";

    protected override async Task OnInitializedAsync()
    {
        await InitializeConnection();
        await LoadMessages();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadMessages();
    }

    private async Task InitializeConnection()
    {
        var tokenResult = await TokenProvider.RequestAccessToken();

        if (tokenResult.TryGetToken(out var token))
        {
            var accessToken = token.Value;
            var url = NavigationManager.ToAbsoluteUri("/chathub").ToString();

            hubConnection = await HubConnectionFactory.CreateConnectionAsync(url, accessToken);

            hubConnection.On<int>("ReceiveMessage", async (chatroomId) =>
            {
                if (chatroomId.ToString() == ChatroomId)
                {
                    await LoadMessages();
                }
            });

            hubConnection.On<int, string>("ReceiveStockMessage", (chatroomId, message) =>
            {
                if (chatroomId.ToString() == ChatroomId)
                {
                    messages.Insert(0, message);
                    StateHasChanged();
                }
            });
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity != null && user.Identity.IsAuthenticated)
        {
            username = user.Identity.Name ?? string.Empty;
        }
    }

    private async Task LoadMessages()
    {
        var url = $"Message/list/{ChatroomId}";
        var responseMessages = await Http.GetFromJsonAsync<Message[]>(url) ?? new Message[] { };

        messages.Clear();
        messages.AddRange(responseMessages.Select(m => $"<i>{m.Timestamp}</i> <strong>{m.UserId}</strong>: {m.Content}"));
        StateHasChanged();
    }

    public async Task Send(string message)
    {
        if (hubConnection?.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync("SendMessage", int.Parse(ChatroomId ?? "1"), username, message);
            userInput = "";
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
